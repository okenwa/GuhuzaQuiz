generator client {
  provider = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model level {
  Level_Id     Int      @id @default(autoincrement())
  Level_Title  String
  Level_number Int
  player       player[]
  quizSessions quizSession[]
}

model milestone {
  Milestone_Id          Int      @id @default(autoincrement())
  Milestone_Title       String
  Milestone_description String
  UnlockingLevel        Int
  Milestone_reward_message String
  Milestone_Link String
  Milestone_Button_CTA String
  player                player[]
  rewardClaims          RewardClaim[]
}

model player {
  Player_ID    Int        @id @default(autoincrement())
  Player_name  String
  nickname     String?   // New field for user nickname
  Playerpoint  Int
  streak       Int
  lastLogin    DateTime
  Level_Id     Int?
  Milestone_Id Int?
  // Social activity tracking
  sharesCount  Int        @default(0)
  invitesCount Int        @default(0)
  lastShareAt  DateTime?
  lastInviteAt DateTime?
  level        level?     @relation(fields: [Level_Id], references: [Level_Id], map: "Player_Level_Id_fkey")
  milestone    milestone? @relation(fields: [Milestone_Id], references: [Milestone_Id], map: "Player_Milestone_Id_fkey")
  quizSessions quizSession[]
  rewardClaims RewardClaim[]
  socialShares SocialShare[]
  friendInvites FriendInvite[]
  
  @@index([Level_Id], map: "Player_Level_Id_fkey")
  @@index([Milestone_Id], map: "Player_Milestone_Id_fkey")
}

model quizSession {
  Session_ID        Int       @id @default(autoincrement())
  Player_ID         Int
  Level_Id          Int
  Current_Question  Int       @default(0)
  Score             Int       @default(0)
  Total_Questions   Int
  Completed         Boolean   @default(false)
  Started_At        DateTime  @default(now())
  Last_Activity     DateTime  @default(now())
  Time_Spent        Int       @default(0) // in seconds
  Correct_Answers   Int       @default(0)
  Wrong_Answers     Int       @default(0)
  Streak            Int       @default(0)
  Used_Hints        Int       @default(0)
  Retry_Count       Int       @default(0)
  player            player    @relation(fields: [Player_ID], references: [Player_ID], onDelete: Cascade)
  level             level     @relation(fields: [Level_Id], references: [Level_Id])
  questionProgress  QuestionProgress[]
  
  @@unique([Player_ID, Level_Id])
  @@index([Player_ID])
  @@index([Level_Id])
}

model QuestionProgress {
  Progress_ID       Int         @id @default(autoincrement())
  Session_ID        Int
  Question_Index    Int
  Selected_Answer   Int?        // -1 if not answered
  Is_Correct        Boolean?
  Time_Taken        Int?        // in seconds
  Used_Hint         Boolean     @default(false)
  Retry_Count       Int         @default(0)
  Answer_Checked    Boolean     @default(false)
  quizSession       quizSession @relation(fields: [Session_ID], references: [Session_ID], onDelete: Cascade)
  
  @@unique([Session_ID, Question_Index])
  @@index([Session_ID])
}

model RewardClaim {
  Claim_ID        Int       @id @default(autoincrement())
  Player_ID       Int
  Milestone_Id    Int?
  Points_Awarded  Int
  Claimed_At      DateTime  @default(now())
  Reward_Type     String    @default("milestone") // milestone, share, invite, streak, special, etc.
  Reward_Data     String?   // JSON string for additional reward data
  player          player    @relation(fields: [Player_ID], references: [Player_ID], onDelete: Cascade)
  milestone       milestone? @relation(fields: [Milestone_Id], references: [Milestone_Id])
  
  @@index([Player_ID])
  @@index([Milestone_Id])
  @@index([Claimed_At])
}

model SocialShare {
  Share_ID        Int       @id @default(autoincrement())
  Player_ID       Int
  Platform        String    // facebook, twitter, linkedin, tiktok, whatsapp
  Share_Content   String    // The content that was shared
  Share_Url       String?   // URL that was shared
  Shared_At       DateTime  @default(now())
  Points_Earned   Int       @default(0)
  player          player    @relation(fields: [Player_ID], references: [Player_ID], onDelete: Cascade)
  
  @@index([Player_ID])
  @@index([Platform])
  @@index([Shared_At])
}

model FriendInvite {
  Invite_ID       Int       @id @default(autoincrement())
  Player_ID       Int       // The player who sent the invite
  Invitee_Email   String
  Invitee_Name    String?
  Referral_Code   String
  Invited_At      DateTime  @default(now())
  Accepted_At     DateTime?
  Accepted_By     Int?      // Player_ID of the person who accepted the invite
  Points_Earned   Int       @default(0)
  Status          String    @default("pending") // pending, accepted, expired
  player          player    @relation(fields: [Player_ID], references: [Player_ID], onDelete: Cascade)
  
  @@index([Player_ID])
  @@index([Invitee_Email])
  @@index([Referral_Code])
  @@index([Status])
  @@index([Invited_At])
}

